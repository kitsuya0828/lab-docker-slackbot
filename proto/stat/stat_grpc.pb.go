// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/stat/stat.proto

package stat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatServiceClient is the client API for StatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatServiceClient interface {
	GetDockerStat(ctx context.Context, in *GetDockerStatRequest, opts ...grpc.CallOption) (*GetDockerStatResponse, error)
	GetFsStat(ctx context.Context, in *GetFsStatRequest, opts ...grpc.CallOption) (*GetFsStatResponse, error)
	GetReccomendation(ctx context.Context, in *GetReccomendationRequest, opts ...grpc.CallOption) (*GetReccomendationResponse, error)
}

type statServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatServiceClient(cc grpc.ClientConnInterface) StatServiceClient {
	return &statServiceClient{cc}
}

func (c *statServiceClient) GetDockerStat(ctx context.Context, in *GetDockerStatRequest, opts ...grpc.CallOption) (*GetDockerStatResponse, error) {
	out := new(GetDockerStatResponse)
	err := c.cc.Invoke(ctx, "/stat.StatService/GetDockerStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statServiceClient) GetFsStat(ctx context.Context, in *GetFsStatRequest, opts ...grpc.CallOption) (*GetFsStatResponse, error) {
	out := new(GetFsStatResponse)
	err := c.cc.Invoke(ctx, "/stat.StatService/GetFsStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statServiceClient) GetReccomendation(ctx context.Context, in *GetReccomendationRequest, opts ...grpc.CallOption) (*GetReccomendationResponse, error) {
	out := new(GetReccomendationResponse)
	err := c.cc.Invoke(ctx, "/stat.StatService/GetReccomendation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatServiceServer is the server API for StatService service.
// All implementations must embed UnimplementedStatServiceServer
// for forward compatibility
type StatServiceServer interface {
	GetDockerStat(context.Context, *GetDockerStatRequest) (*GetDockerStatResponse, error)
	GetFsStat(context.Context, *GetFsStatRequest) (*GetFsStatResponse, error)
	GetReccomendation(context.Context, *GetReccomendationRequest) (*GetReccomendationResponse, error)
	mustEmbedUnimplementedStatServiceServer()
}

// UnimplementedStatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatServiceServer struct {
}

func (UnimplementedStatServiceServer) GetDockerStat(context.Context, *GetDockerStatRequest) (*GetDockerStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDockerStat not implemented")
}
func (UnimplementedStatServiceServer) GetFsStat(context.Context, *GetFsStatRequest) (*GetFsStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFsStat not implemented")
}
func (UnimplementedStatServiceServer) GetReccomendation(context.Context, *GetReccomendationRequest) (*GetReccomendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReccomendation not implemented")
}
func (UnimplementedStatServiceServer) mustEmbedUnimplementedStatServiceServer() {}

// UnsafeStatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatServiceServer will
// result in compilation errors.
type UnsafeStatServiceServer interface {
	mustEmbedUnimplementedStatServiceServer()
}

func RegisterStatServiceServer(s grpc.ServiceRegistrar, srv StatServiceServer) {
	s.RegisterService(&StatService_ServiceDesc, srv)
}

func _StatService_GetDockerStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDockerStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServiceServer).GetDockerStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stat.StatService/GetDockerStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServiceServer).GetDockerStat(ctx, req.(*GetDockerStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatService_GetFsStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFsStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServiceServer).GetFsStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stat.StatService/GetFsStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServiceServer).GetFsStat(ctx, req.(*GetFsStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatService_GetReccomendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReccomendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServiceServer).GetReccomendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stat.StatService/GetReccomendation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServiceServer).GetReccomendation(ctx, req.(*GetReccomendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatService_ServiceDesc is the grpc.ServiceDesc for StatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stat.StatService",
	HandlerType: (*StatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDockerStat",
			Handler:    _StatService_GetDockerStat_Handler,
		},
		{
			MethodName: "GetFsStat",
			Handler:    _StatService_GetFsStat_Handler,
		},
		{
			MethodName: "GetReccomendation",
			Handler:    _StatService_GetReccomendation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/stat/stat.proto",
}
